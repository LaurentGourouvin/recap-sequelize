-- script de création des tables
-- pour passer le script, on va utiliser ce qu'on appelle une transaction
-- une transaction est un ensemble de requêtes qui vont être exécutées
-- dans le cas d'un problème dans les requêtes, la transaction est annulée et le système revient au même point qu'avant le début de la transaction
BEGIN; -- début de la transaction

-- on efface l'ensemble des tables
DROP TABLE IF EXISTS "quiz","user","tag","question","answer","level","quiz_has_tag";

-- table User
-- utilisateur (code_utilisateur,prénom,nom,email,mot_de_passe)
CREATE TABLE "user"(
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- code_utilisateur généré par le système
    "firstname" text NOT NULL,
    "lastname" text NOT NULL,
    "email" text NOT NULL,
    "password" text NOT NULL
);

-- table Quiz
-- quizz (code_quizz,titre,description,#utilisateur(code_utilisateur))
CREATE TABLE "quiz"(
    -- on décrit la table entre les parenthèses
    -- EN SQL : "id" INTEGER GENERATED BY DEFAULT AS IDENTITY
    -- JUSTE POUR POSTREGRES : "id" SERIAL
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "title" text NOT NULL, -- je souhaite forcer le fait que je n'accepte des quiz qui n'ont pas de titre
    "description" text ,
    "user_id" integer NOT NULL REFERENCES "user"("id") -- clef étrangère, référence la table user
);

-- table Category
-- categorie (code_categorie,nom)
CREATE TABLE "tag"(
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" text NOT NULL
);

-- table Level
-- niveau (code_niveau,nom)
CREATE TABLE "level"(
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" text NOT NULL
);

-- table Question
-- question (code_question,description,anecdote,wiki,#niveau(code_niveau),#reponse(code_reponse))
CREATE TABLE "question"(
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "question" text NOT NULL,
    "anecdote" text,
    "wiki" text,
    "level_id" integer NOT NULL REFERENCES "level"("id"), -- clef étrangère, 
    "quiz_id" integer NOT NULL REFERENCES "quiz"("id"),
    --"answer_id" integer NOT NULL REFERENCES "answer"("id")
    "answer_id" integer
);

-- table Answer
-- reponse (code_reponse,description,#question(code_question))
CREATE TABLE "answer"(
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "description" text NOT NULL,
    "question_id" integer NOT NULL REFERENCES "question"("id") -- question liée à la réponse
);

-- je crèe la colonne "bonne réponse" dans la table 
ALTER TABLE "question"
    ADD FOREIGN KEY ("answer_id") REFERENCES "answer"("id"); -- on ajoute la bonne réponse dans la table question

-- table d'association entre catégorie et quiz
CREATE TABLE IF NOT EXISTS "quiz_has_tag" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "quiz_id" integer NOT NULL REFERENCES "quiz"("id"),
  "tag_id" integer NOT NULL REFERENCES "tag" ("id"),
  "created_at" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" timestamptz, -- normalement on ne fera jamais de mise Ã  jour, mais on sait jamais cette table peu Ã©voluer et on pourrait lui rajouter des qualificatif d'association
  UNIQUE ("quiz_id", "tag_id")
);



COMMIT; -- fin de la transaction